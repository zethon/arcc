language: cpp

install:
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      export CC=${CC_COMPILER}
      export CXX=${CXX_COMPILER}

      # Install conan and make sure that it uses Python3, otherwise we will get a
      # cert failure when trying to download curl
      sudo pip install conan
      alias python=python3
    fi

  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew update
      brew install conan
    fi

  - conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan

matrix:
  include:
    # - os: osx
    #   osx_image: xcode10
    #   compiler: clang
    #   env: CONFIG=Release
    # - os: osx
    #   osx_image: xcode10
    #   compiler: clang
    #   env: CONFIG=Debug

    - os: linux
      dist: bionic
      sudo: required
      compiler: gcc
      language: python
      python: "3.6"
      env:
        - CC_COMPILER=gcc-7
        - CXX_COMPILER=g++-7
        - CONFIG=Debug
      addons:
        apt:
          packages:
            - gcc-7
            - g++-7
            - build-essential
            - cmake
          # sources:
          #   - ubuntu-toolchain-r-test

script:
  - git submodule update --init --recursive
  - mkdir build
  - cd build
  - cmake --version
  # - conan install .. --build missing -s cppstd=17
  - conan install .. --build missing  -s compiler.libcxx=libstdc++11

  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      cmake .. -DBUILD_ARCC_TESTS=ON -DCODE_COVERAGE=ON
    fi

  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      cmake .. -DBUILD_ARCC_TESTS=ON -DCODE_COVERAGE=ON
    fi  
  
  - cmake --build . --config "${CONFIG}" -- -j3
  - ctest -C "${CONFIG}" --output-on-failure
  
after_success:
  # Create lcov report
  # capture coverage info
  - lcov --directory . --capture --output-file coverage.info
  # filter out system and extra files.
  # To also not include test code in coverage add them with full path to the patterns: '*/tests/*'
  - lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.info
  # output coverage data for debugging (optional)
  - lcov --list coverage.info
  # Uploading to CodeCov
  # '-f' specifies file(s) to use and disables manual coverage gathering and file search which has already been done above
  - bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"

notifactions:
  email:
    recipients:
      - aclaure@gmail.com
    on_suucess: never
    on_failure: always
